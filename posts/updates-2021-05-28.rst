.. title: Updates 2021/05/28
.. slug: updates-2021-05-28
.. date: 2021-05-28 15:54:00 UTC+12:00
.. tags: 
.. status: 
.. category: 
.. link: 
.. description: 
.. type: text
.. author: FracPete

A bunch of changes and updates happened since last time in relation to
spreadsheet handling (general and spectral data related). One thing that
I've been trying to sort out was creating screenshots of tables. You can
now use *Send to -> Export table as image* on pretty much any native
ADAMS table to create a screenshot of a table.

**Fixes**

* The *ListVariableUsage* actor processor now also inspects VariableNameValuePair (and arrays)
  and BaseObject arrays for variables.


**Changes**

* The search panel received an overhaul, including an added clear button.
  The Preview browser now performs incremental search for a more efficient search.
* The spreadsheet handlers in the *Preview browser* now allow the user to select
  a custom cell rendering, e.g., for highlighting certain values.
* Most tables should now offer *Send to* capability and the new *Export table as image*
  action to export the current table as an image in various formats. With the
  *Copy table as image*, the table gets copied as image to the clipboard.
* The *SpreadSheetDisplay* sink can now be used in conjunction with the 
  *CallableActorScreenshot* actor.
* The *Preview browser* supports export of tables as images now as well.
* commons-io/commons-io upgraded to 2.7
* *adams-imaging:* 

  * The *ObjectLocationsFromReport* operation for the *Draw* transformer
    now allows varying the shape color as well, just like in the Preview browser.
  * Object location overlays can now fall back on the bounding box if the polygon 
    is too small (eg from a bad mask). Also applies to the Preview browser and 
    Draw transformer plugin.

* *adams-matlab:* improved handling of character cells in the *MatlabArrayToSpreadSheet*
  conversion.
* *adams-net:* The *HttpRequest* transformer now has an option for defining the
  mime-type of the data, default is application/octect-stream.
* *adams-weka* and *adams-weka-lts*: The *WekaInstancesDisplay* sink can now be used 
  in conjunction with the *CallableActorScreenshot* actor now.
* *adams-spreadsheet:* The *SpreadSheetInsertRow* transformer can interpret the
  value now as blank or comma-separated values as well. The value(s) can now be forced
  to be STRING as well.
* *adams-spectral-2dim-core:* the JSON format for spectra has been overhauls, using 
  separate arrays for wave numbers and amplitudes now to reduce file size. Also, 
  either the full report or specific reference+meta-data values can be written/read.


**Additions**

* The *HeatmapCellRenderingCustomizer* cell rendering customizer for spreadsheet tables
  allows one to color in the background of numeric cells based on the global min/max
  and the specified color generator. Makes it easier to spot extreme values.
* The *HasElements* boolean flow condition checks whether the incoming object is an
  array and has at least specified number of elements.
* The *HasSize* boolean flow condition checks whether the incoming collection
  has at least the specified size.
* The *ReportArrayToMap* conversion turns the a report array into a map using the 
  specified report field as key.
* The *MergeReportFromMap* transformer allows the reports passing through 
  (either Report or MutableReportHandler objects) to be merged with reports
  available from a map in storage. This way, meta-data can be read separately
  and stored in a map in storage and then easily attached.
* *adams-imaging:* 

  * Added general support for point annotations, which can be used for pose estimation.
  * Added support for reading/writing DeepLabCut CSV annotation files

* *adams-spectral-2dim-core:* 
  
  * The *Flatliner* outlier detector picks up on spectra that only consist of one value.
  * The *SpreadSheetColumnsToSpectra* conversion generates multiple spectra from a spreadsheet,
    more flexible than *SpreadSheetColumnToSpectrum*. The *SpreadSheetRowsToSpectra* conversion
    works similar, but row-wise instead of column-wise.
  * The *SpreadSheetColumnsToSampleData* conversion generates sample data objects (= reports)
    from columns from a spreadsheet. The *SpreadSheetRowsToSampleData* conversion does the same
    using rows from a spreadsheet.
  * The *SampleDataArrayToMap* conversion generates a map from the array, using the sample ID
    as key for the map.
  * The *SpreadSheetRowGenerator* transformer allows you to generate spreadsheet rows from
    spectra using various generators.

* *adams-heatmap:* Added the *MultiHeatmapOperation* transformer, which allows applying
  an operation to an array of heatmaps.
* *adams-spreadsheet:* 

  * The *SpreadSheetUseRowAsHeader* conversion replaces the values in the header row with 
    the ones from the specified data row.
  * The *SpreadSheetColumnsToReport* and *SpreadSheetRowsToReport* conversions convert
    columns/rows in a spreadsheet containing meta-data into Report objects.

